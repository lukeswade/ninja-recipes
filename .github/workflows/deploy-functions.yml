name: CI — build & deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  preflight:
    name: Preflight checks
    runs-on: ubuntu-latest
    outputs:
      has_cf_token: ${{ steps.check.outputs.has_cf_token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Server typecheck
        run: npm run check:server

      - name: Check required secrets
        id: check
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          missing=0
          if [ -z "$FIREBASE_SERVICE_ACCOUNT" ]; then
            echo "FIREBASE_SERVICE_ACCOUNT is not set"
            missing=1
          fi
          # Set output for Cloudflare token existence (empty string when missing)
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "has_cf_token=false" >> $GITHUB_OUTPUT
          else
            echo "has_cf_token=true" >> $GITHUB_OUTPUT
          fi
          if [ "$missing" -eq 1 ]; then
            echo "Required secrets are missing; failing preflight"
            exit 1
          fi

  build-client:
    name: Build client
    runs-on: ubuntu-latest
    needs: preflight
    env:
      VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
      VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
      VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
      VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build client
        run: npm run build

  smoke-check:
    name: "Smoke test: confirm Firebase project & apps"
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud (for API calls)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'

      - name: Print Firebase project info and web apps (non-secret fields)
        env:
          PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        run: |
          set -euo pipefail
          # print project info
          echo "=== Firebase project GET ==="
          firebase projects:list --json | jq -r '.[] | select(.projectId==env.PROJECT_ID)'

          echo "\n=== Firebase Management API: project ==="
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          curl -sS -H "Authorization: Bearer $ACCESS_TOKEN" "https://firebase.googleapis.com/v1beta1/projects/${PROJECT_ID}" | jq . || true

          echo "\n=== Firebase webApps (public appId + apiKey) ==="
          curl -sS -H "Authorization: Bearer $ACCESS_TOKEN" "https://firebase.googleapis.com/v1beta1/projects/${PROJECT_ID}/webApps" | jq . || true

          echo "\n=== adminSdkConfig (service account-level info) ==="
          curl -sS -H "Authorization: Bearer $ACCESS_TOKEN" "https://firebase.googleapis.com/v1beta1/projects/${PROJECT_ID}/adminSdkConfig" | jq . || true

  build-functions:
    name: Build functions (optional)
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for functions directory
        id: check_funcs
        run: |
          if [ -d functions ]; then
            echo "has_functions=true" >> $GITHUB_OUTPUT
          else
            echo "has_functions=false" >> $GITHUB_OUTPUT
          fi

      - name: Restore functions cache
        if: steps.check_funcs.outputs.has_functions == 'true'
        uses: actions/cache@v4
        with:
          path: functions/node_modules
          key: ${{ runner.os }}-functions-${{ hashFiles('functions/package-lock.json') }}

      - name: Install and build functions
        if: steps.check_funcs.outputs.has_functions == 'true'
        run: |
          cd functions
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build || true

  deploy-functions:
    name: Deploy to Firebase Functions (optional)
    runs-on: ubuntu-latest
    needs: [ build-client, build-functions ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install functions dependencies
        run: |
          if [ -d functions ]; then
            cd functions
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci
            else
              npm install
            fi
          else
            echo "No functions directory found — skipping functions install"
          fi

      - name: Deploy to Firebase Functions
        run: |
          if [ -d functions ]; then
            # Deploy to the creamininja project (user requested)
            firebase deploy --only functions:api --project creamininja --force
          else
            echo "No functions directory found — skipping firebase functions deploy"
          fi

  deploy-pages:
    name: Deploy to Cloudflare Pages (optional)
    runs-on: ubuntu-latest
    needs: build-client
    if: needs.preflight.outputs.has_cf_token == 'true'
    env:
      VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
      VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
      VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
      VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      # This action needs CLOUDFLARE_API_TOKEN secret to be set in repo settings
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: "ninja-recipes"
          directory: "dist/public"
