name: Sync Cloudflare Pages env vars

on:
  workflow_dispatch:

jobs:
  sync-vars:
    name: Sync VITE_* secrets to Cloudflare Pages
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      PROJECT_NAME: "ninja-recipes"
      ENVIRONMENT: "production"
      VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
      VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
      VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
      VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sync variables to Cloudflare Pages (safe)
        run: |
          set -euo pipefail
          API_BASE="https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects/${PROJECT_NAME}/environments/${ENVIRONMENT}/variables"

          VARS=(
            "VITE_FIREBASE_API_KEY"
            "VITE_FIREBASE_AUTH_DOMAIN"
            "VITE_FIREBASE_PROJECT_ID"
            "VITE_FIREBASE_STORAGE_BUCKET"
            "VITE_FIREBASE_MESSAGING_SENDER_ID"
            "VITE_FIREBASE_APP_ID"
          )

          echo "Listing existing variables (names only)..."
          EXISTING=$(curl -sS -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" "${API_BASE}" | jq -r '.result[]?.name' || true)

          for NAME in "${VARS[@]}"; do
            # read the secret value from env
            VALUE=""
            case "$NAME" in
              VITE_FIREBASE_API_KEY) VALUE="$VITE_FIREBASE_API_KEY" ;;
              VITE_FIREBASE_AUTH_DOMAIN) VALUE="$VITE_FIREBASE_AUTH_DOMAIN" ;;
              VITE_FIREBASE_PROJECT_ID) VALUE="$VITE_FIREBASE_PROJECT_ID" ;;
              VITE_FIREBASE_STORAGE_BUCKET) VALUE="$VITE_FIREBASE_STORAGE_BUCKET" ;;
              VITE_FIREBASE_MESSAGING_SENDER_ID) VALUE="$VITE_FIREBASE_MESSAGING_SENDER_ID" ;;
              VITE_FIREBASE_APP_ID) VALUE="$VITE_FIREBASE_APP_ID" ;;
            esac

            if [ -z "$VALUE" ]; then
              echo "- Skipping $NAME (secret not set)"
              continue
            fi

            # check if exists and get id
            ID=$(curl -sS -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" "${API_BASE}" | jq -r --arg NAME "$NAME" '.result[]? | select(.name==$NAME) | .id' || true)

            payload=$(jq -n --arg name "$NAME" --arg value "$VALUE" '{name:$name, value:$value}')

            if [ -n "$ID" ] && [ "$ID" != "null" ]; then
              # update
              resp=$(curl -sS -X PATCH -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" -H "Content-Type: application/json" "${API_BASE}/${ID}" --data "$payload" )
              ok=$(echo "$resp" | jq -r '.success // false')
              if [ "$ok" = "true" ]; then
                echo "- Updated $NAME"
              else
                echo "- Failed to update $NAME"
                echo "$resp" | jq -C '.'
              fi
            else
              # create
              resp=$(curl -sS -X POST -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" -H "Content-Type: application/json" "${API_BASE}" --data "$payload" )
              ok=$(echo "$resp" | jq -r '.success // false')
              if [ "$ok" = "true" ]; then
                echo "- Created $NAME"
              else
                echo "- Failed to create $NAME"
                echo "$resp" | jq -C '.'
              fi
            fi
          done

          echo "Sync complete. Cloudflare Pages variables updated for project ${PROJECT_NAME} (${ENVIRONMENT})."
